/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
	acifabricattachmentv1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/applyconfiguration/aci.fabricattachment/v1"
	scheme "github.com/noironetworks/aci-containers/pkg/fabricattachment/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NodeFabricL3PeersesGetter has a method to return a NodeFabricL3PeersInterface.
// A group's client should implement this interface.
type NodeFabricL3PeersesGetter interface {
	NodeFabricL3Peerses() NodeFabricL3PeersInterface
}

// NodeFabricL3PeersInterface has methods to work with NodeFabricL3Peers resources.
type NodeFabricL3PeersInterface interface {
	Create(ctx context.Context, nodeFabricL3Peers *v1.NodeFabricL3Peers, opts metav1.CreateOptions) (*v1.NodeFabricL3Peers, error)
	Update(ctx context.Context, nodeFabricL3Peers *v1.NodeFabricL3Peers, opts metav1.UpdateOptions) (*v1.NodeFabricL3Peers, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.NodeFabricL3Peers, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.NodeFabricL3PeersList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.NodeFabricL3Peers, err error)
	Apply(ctx context.Context, nodeFabricL3Peers *acifabricattachmentv1.NodeFabricL3PeersApplyConfiguration, opts metav1.ApplyOptions) (result *v1.NodeFabricL3Peers, err error)
	NodeFabricL3PeersExpansion
}

// nodeFabricL3Peerses implements NodeFabricL3PeersInterface
type nodeFabricL3Peerses struct {
	client rest.Interface
}

// newNodeFabricL3Peerses returns a NodeFabricL3Peerses
func newNodeFabricL3Peerses(c *AciV1Client) *nodeFabricL3Peerses {
	return &nodeFabricL3Peerses{
		client: c.RESTClient(),
	}
}

// Get takes name of the nodeFabricL3Peers, and returns the corresponding nodeFabricL3Peers object, and an error if there is any.
func (c *nodeFabricL3Peerses) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.NodeFabricL3Peers, err error) {
	result = &v1.NodeFabricL3Peers{}
	err = c.client.Get().
		Resource("nodefabricl3peerses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NodeFabricL3Peerses that match those selectors.
func (c *nodeFabricL3Peerses) List(ctx context.Context, opts metav1.ListOptions) (result *v1.NodeFabricL3PeersList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.NodeFabricL3PeersList{}
	err = c.client.Get().
		Resource("nodefabricl3peerses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nodeFabricL3Peerses.
func (c *nodeFabricL3Peerses) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("nodefabricl3peerses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a nodeFabricL3Peers and creates it.  Returns the server's representation of the nodeFabricL3Peers, and an error, if there is any.
func (c *nodeFabricL3Peerses) Create(ctx context.Context, nodeFabricL3Peers *v1.NodeFabricL3Peers, opts metav1.CreateOptions) (result *v1.NodeFabricL3Peers, err error) {
	result = &v1.NodeFabricL3Peers{}
	err = c.client.Post().
		Resource("nodefabricl3peerses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nodeFabricL3Peers).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a nodeFabricL3Peers and updates it. Returns the server's representation of the nodeFabricL3Peers, and an error, if there is any.
func (c *nodeFabricL3Peerses) Update(ctx context.Context, nodeFabricL3Peers *v1.NodeFabricL3Peers, opts metav1.UpdateOptions) (result *v1.NodeFabricL3Peers, err error) {
	result = &v1.NodeFabricL3Peers{}
	err = c.client.Put().
		Resource("nodefabricl3peerses").
		Name(nodeFabricL3Peers.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nodeFabricL3Peers).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the nodeFabricL3Peers and deletes it. Returns an error if one occurs.
func (c *nodeFabricL3Peerses) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("nodefabricl3peerses").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nodeFabricL3Peerses) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("nodefabricl3peerses").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched nodeFabricL3Peers.
func (c *nodeFabricL3Peerses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.NodeFabricL3Peers, err error) {
	result = &v1.NodeFabricL3Peers{}
	err = c.client.Patch(pt).
		Resource("nodefabricl3peerses").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied nodeFabricL3Peers.
func (c *nodeFabricL3Peerses) Apply(ctx context.Context, nodeFabricL3Peers *acifabricattachmentv1.NodeFabricL3PeersApplyConfiguration, opts metav1.ApplyOptions) (result *v1.NodeFabricL3Peers, err error) {
	if nodeFabricL3Peers == nil {
		return nil, fmt.Errorf("nodeFabricL3Peers provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(nodeFabricL3Peers)
	if err != nil {
		return nil, err
	}
	name := nodeFabricL3Peers.Name
	if name == nil {
		return nil, fmt.Errorf("nodeFabricL3Peers.Name must be provided to Apply")
	}
	result = &v1.NodeFabricL3Peers{}
	err = c.client.Patch(types.ApplyPatchType).
		Resource("nodefabricl3peerses").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
