/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
	acifabricattachmentv1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/applyconfiguration/aci.fabricattachment/v1"
	scheme "github.com/noironetworks/aci-containers/pkg/fabricattachment/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FabricVlanPoolsGetter has a method to return a FabricVlanPoolInterface.
// A group's client should implement this interface.
type FabricVlanPoolsGetter interface {
	FabricVlanPools(namespace string) FabricVlanPoolInterface
}

// FabricVlanPoolInterface has methods to work with FabricVlanPool resources.
type FabricVlanPoolInterface interface {
	Create(ctx context.Context, fabricVlanPool *v1.FabricVlanPool, opts metav1.CreateOptions) (*v1.FabricVlanPool, error)
	Update(ctx context.Context, fabricVlanPool *v1.FabricVlanPool, opts metav1.UpdateOptions) (*v1.FabricVlanPool, error)
	UpdateStatus(ctx context.Context, fabricVlanPool *v1.FabricVlanPool, opts metav1.UpdateOptions) (*v1.FabricVlanPool, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.FabricVlanPool, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.FabricVlanPoolList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.FabricVlanPool, err error)
	Apply(ctx context.Context, fabricVlanPool *acifabricattachmentv1.FabricVlanPoolApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FabricVlanPool, err error)
	ApplyStatus(ctx context.Context, fabricVlanPool *acifabricattachmentv1.FabricVlanPoolApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FabricVlanPool, err error)
	FabricVlanPoolExpansion
}

// fabricVlanPools implements FabricVlanPoolInterface
type fabricVlanPools struct {
	client rest.Interface
	ns     string
}

// newFabricVlanPools returns a FabricVlanPools
func newFabricVlanPools(c *AciV1Client, namespace string) *fabricVlanPools {
	return &fabricVlanPools{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the fabricVlanPool, and returns the corresponding fabricVlanPool object, and an error if there is any.
func (c *fabricVlanPools) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.FabricVlanPool, err error) {
	result = &v1.FabricVlanPool{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FabricVlanPools that match those selectors.
func (c *fabricVlanPools) List(ctx context.Context, opts metav1.ListOptions) (result *v1.FabricVlanPoolList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.FabricVlanPoolList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested fabricVlanPools.
func (c *fabricVlanPools) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a fabricVlanPool and creates it.  Returns the server's representation of the fabricVlanPool, and an error, if there is any.
func (c *fabricVlanPools) Create(ctx context.Context, fabricVlanPool *v1.FabricVlanPool, opts metav1.CreateOptions) (result *v1.FabricVlanPool, err error) {
	result = &v1.FabricVlanPool{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(fabricVlanPool).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a fabricVlanPool and updates it. Returns the server's representation of the fabricVlanPool, and an error, if there is any.
func (c *fabricVlanPools) Update(ctx context.Context, fabricVlanPool *v1.FabricVlanPool, opts metav1.UpdateOptions) (result *v1.FabricVlanPool, err error) {
	result = &v1.FabricVlanPool{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		Name(fabricVlanPool.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(fabricVlanPool).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *fabricVlanPools) UpdateStatus(ctx context.Context, fabricVlanPool *v1.FabricVlanPool, opts metav1.UpdateOptions) (result *v1.FabricVlanPool, err error) {
	result = &v1.FabricVlanPool{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		Name(fabricVlanPool.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(fabricVlanPool).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the fabricVlanPool and deletes it. Returns an error if one occurs.
func (c *fabricVlanPools) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *fabricVlanPools) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("fabricvlanpools").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched fabricVlanPool.
func (c *fabricVlanPools) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.FabricVlanPool, err error) {
	result = &v1.FabricVlanPool{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("fabricvlanpools").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied fabricVlanPool.
func (c *fabricVlanPools) Apply(ctx context.Context, fabricVlanPool *acifabricattachmentv1.FabricVlanPoolApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FabricVlanPool, err error) {
	if fabricVlanPool == nil {
		return nil, fmt.Errorf("fabricVlanPool provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(fabricVlanPool)
	if err != nil {
		return nil, err
	}
	name := fabricVlanPool.Name
	if name == nil {
		return nil, fmt.Errorf("fabricVlanPool.Name must be provided to Apply")
	}
	result = &v1.FabricVlanPool{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("fabricvlanpools").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *fabricVlanPools) ApplyStatus(ctx context.Context, fabricVlanPool *acifabricattachmentv1.FabricVlanPoolApplyConfiguration, opts metav1.ApplyOptions) (result *v1.FabricVlanPool, err error) {
	if fabricVlanPool == nil {
		return nil, fmt.Errorf("fabricVlanPool provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(fabricVlanPool)
	if err != nil {
		return nil, err
	}

	name := fabricVlanPool.Name
	if name == nil {
		return nil, fmt.Errorf("fabricVlanPool.Name must be provided to Apply")
	}

	result = &v1.FabricVlanPool{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("fabricvlanpools").
		Name(*name).
		SubResource("status").
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
