/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NadVlanMapLister helps list NadVlanMaps.
// All objects returned here must be treated as read-only.
type NadVlanMapLister interface {
	// List lists all NadVlanMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NadVlanMap, err error)
	// NadVlanMaps returns an object that can list and get NadVlanMaps.
	NadVlanMaps(namespace string) NadVlanMapNamespaceLister
	NadVlanMapListerExpansion
}

// nadVlanMapLister implements the NadVlanMapLister interface.
type nadVlanMapLister struct {
	indexer cache.Indexer
}

// NewNadVlanMapLister returns a new NadVlanMapLister.
func NewNadVlanMapLister(indexer cache.Indexer) NadVlanMapLister {
	return &nadVlanMapLister{indexer: indexer}
}

// List lists all NadVlanMaps in the indexer.
func (s *nadVlanMapLister) List(selector labels.Selector) (ret []*v1.NadVlanMap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NadVlanMap))
	})
	return ret, err
}

// NadVlanMaps returns an object that can list and get NadVlanMaps.
func (s *nadVlanMapLister) NadVlanMaps(namespace string) NadVlanMapNamespaceLister {
	return nadVlanMapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NadVlanMapNamespaceLister helps list and get NadVlanMaps.
// All objects returned here must be treated as read-only.
type NadVlanMapNamespaceLister interface {
	// List lists all NadVlanMaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NadVlanMap, err error)
	// Get retrieves the NadVlanMap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NadVlanMap, error)
	NadVlanMapNamespaceListerExpansion
}

// nadVlanMapNamespaceLister implements the NadVlanMapNamespaceLister
// interface.
type nadVlanMapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NadVlanMaps in the indexer for a given namespace.
func (s nadVlanMapNamespaceLister) List(selector labels.Selector) (ret []*v1.NadVlanMap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NadVlanMap))
	})
	return ret, err
}

// Get retrieves the NadVlanMap from the indexer for a given namespace and name.
func (s nadVlanMapNamespaceLister) Get(name string) (*v1.NadVlanMap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nadvlanmap"), name)
	}
	return obj.(*v1.NadVlanMap), nil
}
