/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FabricVlanPoolLister helps list FabricVlanPools.
// All objects returned here must be treated as read-only.
type FabricVlanPoolLister interface {
	// List lists all FabricVlanPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FabricVlanPool, err error)
	// FabricVlanPools returns an object that can list and get FabricVlanPools.
	FabricVlanPools(namespace string) FabricVlanPoolNamespaceLister
	FabricVlanPoolListerExpansion
}

// fabricVlanPoolLister implements the FabricVlanPoolLister interface.
type fabricVlanPoolLister struct {
	indexer cache.Indexer
}

// NewFabricVlanPoolLister returns a new FabricVlanPoolLister.
func NewFabricVlanPoolLister(indexer cache.Indexer) FabricVlanPoolLister {
	return &fabricVlanPoolLister{indexer: indexer}
}

// List lists all FabricVlanPools in the indexer.
func (s *fabricVlanPoolLister) List(selector labels.Selector) (ret []*v1.FabricVlanPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FabricVlanPool))
	})
	return ret, err
}

// FabricVlanPools returns an object that can list and get FabricVlanPools.
func (s *fabricVlanPoolLister) FabricVlanPools(namespace string) FabricVlanPoolNamespaceLister {
	return fabricVlanPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FabricVlanPoolNamespaceLister helps list and get FabricVlanPools.
// All objects returned here must be treated as read-only.
type FabricVlanPoolNamespaceLister interface {
	// List lists all FabricVlanPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FabricVlanPool, err error)
	// Get retrieves the FabricVlanPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.FabricVlanPool, error)
	FabricVlanPoolNamespaceListerExpansion
}

// fabricVlanPoolNamespaceLister implements the FabricVlanPoolNamespaceLister
// interface.
type fabricVlanPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FabricVlanPools in the indexer for a given namespace.
func (s fabricVlanPoolNamespaceLister) List(selector labels.Selector) (ret []*v1.FabricVlanPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FabricVlanPool))
	})
	return ret, err
}

// Get retrieves the FabricVlanPool from the indexer for a given namespace and name.
func (s fabricVlanPoolNamespaceLister) Get(name string) (*v1.FabricVlanPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("fabricvlanpool"), name)
	}
	return obj.(*v1.FabricVlanPool), nil
}
