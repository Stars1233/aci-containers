/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkFabricL3ConfigurationLister helps list NetworkFabricL3Configurations.
// All objects returned here must be treated as read-only.
type NetworkFabricL3ConfigurationLister interface {
	// List lists all NetworkFabricL3Configurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NetworkFabricL3Configuration, err error)
	// NetworkFabricL3Configurations returns an object that can list and get NetworkFabricL3Configurations.
	NetworkFabricL3Configurations(namespace string) NetworkFabricL3ConfigurationNamespaceLister
	NetworkFabricL3ConfigurationListerExpansion
}

// networkFabricL3ConfigurationLister implements the NetworkFabricL3ConfigurationLister interface.
type networkFabricL3ConfigurationLister struct {
	indexer cache.Indexer
}

// NewNetworkFabricL3ConfigurationLister returns a new NetworkFabricL3ConfigurationLister.
func NewNetworkFabricL3ConfigurationLister(indexer cache.Indexer) NetworkFabricL3ConfigurationLister {
	return &networkFabricL3ConfigurationLister{indexer: indexer}
}

// List lists all NetworkFabricL3Configurations in the indexer.
func (s *networkFabricL3ConfigurationLister) List(selector labels.Selector) (ret []*v1.NetworkFabricL3Configuration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NetworkFabricL3Configuration))
	})
	return ret, err
}

// NetworkFabricL3Configurations returns an object that can list and get NetworkFabricL3Configurations.
func (s *networkFabricL3ConfigurationLister) NetworkFabricL3Configurations(namespace string) NetworkFabricL3ConfigurationNamespaceLister {
	return networkFabricL3ConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkFabricL3ConfigurationNamespaceLister helps list and get NetworkFabricL3Configurations.
// All objects returned here must be treated as read-only.
type NetworkFabricL3ConfigurationNamespaceLister interface {
	// List lists all NetworkFabricL3Configurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NetworkFabricL3Configuration, err error)
	// Get retrieves the NetworkFabricL3Configuration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NetworkFabricL3Configuration, error)
	NetworkFabricL3ConfigurationNamespaceListerExpansion
}

// networkFabricL3ConfigurationNamespaceLister implements the NetworkFabricL3ConfigurationNamespaceLister
// interface.
type networkFabricL3ConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkFabricL3Configurations in the indexer for a given namespace.
func (s networkFabricL3ConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1.NetworkFabricL3Configuration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NetworkFabricL3Configuration))
	})
	return ret, err
}

// Get retrieves the NetworkFabricL3Configuration from the indexer for a given namespace and name.
func (s networkFabricL3ConfigurationNamespaceLister) Get(name string) (*v1.NetworkFabricL3Configuration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("networkfabricl3configuration"), name)
	}
	return obj.(*v1.NetworkFabricL3Configuration), nil
}
