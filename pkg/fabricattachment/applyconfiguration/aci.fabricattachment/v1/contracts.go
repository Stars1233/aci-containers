/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ContractsApplyConfiguration represents an declarative configuration of the Contracts type for use
// with apply.
type ContractsApplyConfiguration struct {
	Consumer []string `json:"consumer,omitempty"`
	Provider []string `json:"provider,omitempty"`
}

// ContractsApplyConfiguration constructs an declarative configuration of the Contracts type for use with
// apply.
func Contracts() *ContractsApplyConfiguration {
	return &ContractsApplyConfiguration{}
}

// WithConsumer adds the given value to the Consumer field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Consumer field.
func (b *ContractsApplyConfiguration) WithConsumer(values ...string) *ContractsApplyConfiguration {
	for i := range values {
		b.Consumer = append(b.Consumer, values[i])
	}
	return b
}

// WithProvider adds the given value to the Provider field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Provider field.
func (b *ContractsApplyConfiguration) WithProvider(values ...string) *ContractsApplyConfiguration {
	for i := range values {
		b.Provider = append(b.Provider, values[i])
	}
	return b
}
