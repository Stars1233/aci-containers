/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/fabricattachment/apis/aci.fabricattachment/v1"
)

// PolicyPrefixApplyConfiguration represents an declarative configuration of the PolicyPrefix type for use
// with apply.
type PolicyPrefixApplyConfiguration struct {
	Subnet    *string                           `json:"subnet,omitempty"`
	Scope     []v1.PolicyPrefixScopeOptions     `json:"scope,omitempty"`
	Aggregate []v1.PolicyPrefixAggregateOptions `json:"aggregate,omitempty"`
}

// PolicyPrefixApplyConfiguration constructs an declarative configuration of the PolicyPrefix type for use with
// apply.
func PolicyPrefix() *PolicyPrefixApplyConfiguration {
	return &PolicyPrefixApplyConfiguration{}
}

// WithSubnet sets the Subnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subnet field is set to the value of the last call.
func (b *PolicyPrefixApplyConfiguration) WithSubnet(value string) *PolicyPrefixApplyConfiguration {
	b.Subnet = &value
	return b
}

// WithScope adds the given value to the Scope field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Scope field.
func (b *PolicyPrefixApplyConfiguration) WithScope(values ...v1.PolicyPrefixScopeOptions) *PolicyPrefixApplyConfiguration {
	for i := range values {
		b.Scope = append(b.Scope, values[i])
	}
	return b
}

// WithAggregate adds the given value to the Aggregate field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Aggregate field.
func (b *PolicyPrefixApplyConfiguration) WithAggregate(values ...v1.PolicyPrefixAggregateOptions) *PolicyPrefixApplyConfiguration {
	for i := range values {
		b.Aggregate = append(b.Aggregate, values[i])
	}
	return b
}
