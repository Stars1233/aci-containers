/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// NodeFabricNetworkAttachmentSpecApplyConfiguration represents an declarative configuration of the NodeFabricNetworkAttachmentSpec type for use
// with apply.
type NodeFabricNetworkAttachmentSpecApplyConfiguration struct {
	NetworkRef  *ObjRefApplyConfiguration                         `json:"networkRef,omitempty"`
	EncapVlan   *EncapSourceApplyConfiguration                    `json:"encapVlan,omitempty"`
	NodeName    *string                                           `json:"nodeName,omitempty"`
	AciTopology map[string]AciNodeLinkAdjacencyApplyConfiguration `json:"aciTopology,omitempty"`
	PrimaryCNI  *string                                           `json:"primaryCni,omitempty"`
}

// NodeFabricNetworkAttachmentSpecApplyConfiguration constructs an declarative configuration of the NodeFabricNetworkAttachmentSpec type for use with
// apply.
func NodeFabricNetworkAttachmentSpec() *NodeFabricNetworkAttachmentSpecApplyConfiguration {
	return &NodeFabricNetworkAttachmentSpecApplyConfiguration{}
}

// WithNetworkRef sets the NetworkRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkRef field is set to the value of the last call.
func (b *NodeFabricNetworkAttachmentSpecApplyConfiguration) WithNetworkRef(value *ObjRefApplyConfiguration) *NodeFabricNetworkAttachmentSpecApplyConfiguration {
	b.NetworkRef = value
	return b
}

// WithEncapVlan sets the EncapVlan field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EncapVlan field is set to the value of the last call.
func (b *NodeFabricNetworkAttachmentSpecApplyConfiguration) WithEncapVlan(value *EncapSourceApplyConfiguration) *NodeFabricNetworkAttachmentSpecApplyConfiguration {
	b.EncapVlan = value
	return b
}

// WithNodeName sets the NodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeName field is set to the value of the last call.
func (b *NodeFabricNetworkAttachmentSpecApplyConfiguration) WithNodeName(value string) *NodeFabricNetworkAttachmentSpecApplyConfiguration {
	b.NodeName = &value
	return b
}

// WithAciTopology puts the entries into the AciTopology field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AciTopology field,
// overwriting an existing map entries in AciTopology field with the same key.
func (b *NodeFabricNetworkAttachmentSpecApplyConfiguration) WithAciTopology(entries map[string]AciNodeLinkAdjacencyApplyConfiguration) *NodeFabricNetworkAttachmentSpecApplyConfiguration {
	if b.AciTopology == nil && len(entries) > 0 {
		b.AciTopology = make(map[string]AciNodeLinkAdjacencyApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.AciTopology[k] = v
	}
	return b
}

// WithPrimaryCNI sets the PrimaryCNI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrimaryCNI field is set to the value of the last call.
func (b *NodeFabricNetworkAttachmentSpecApplyConfiguration) WithPrimaryCNI(value string) *NodeFabricNetworkAttachmentSpecApplyConfiguration {
	b.PrimaryCNI = &value
	return b
}
