/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// FabricL3OutRtrNodeApplyConfiguration represents an declarative configuration of the FabricL3OutRtrNode type for use
// with apply.
type FabricL3OutRtrNodeApplyConfiguration struct {
	NodeRef      *FabricNodeRefApplyConfiguration           `json:"nodeRef,omitempty"`
	RtrId        *string                                    `json:"rtrId,omitempty"`
	StaticRoutes []FabricL3OutStaticRouteApplyConfiguration `json:"staticRoutes,omitempty"`
}

// FabricL3OutRtrNodeApplyConfiguration constructs an declarative configuration of the FabricL3OutRtrNode type for use with
// apply.
func FabricL3OutRtrNode() *FabricL3OutRtrNodeApplyConfiguration {
	return &FabricL3OutRtrNodeApplyConfiguration{}
}

// WithNodeRef sets the NodeRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeRef field is set to the value of the last call.
func (b *FabricL3OutRtrNodeApplyConfiguration) WithNodeRef(value *FabricNodeRefApplyConfiguration) *FabricL3OutRtrNodeApplyConfiguration {
	b.NodeRef = value
	return b
}

// WithRtrId sets the RtrId field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RtrId field is set to the value of the last call.
func (b *FabricL3OutRtrNodeApplyConfiguration) WithRtrId(value string) *FabricL3OutRtrNodeApplyConfiguration {
	b.RtrId = &value
	return b
}

// WithStaticRoutes adds the given value to the StaticRoutes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StaticRoutes field.
func (b *FabricL3OutRtrNodeApplyConfiguration) WithStaticRoutes(values ...*FabricL3OutStaticRouteApplyConfiguration) *FabricL3OutRtrNodeApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStaticRoutes")
		}
		b.StaticRoutes = append(b.StaticRoutes, *values[i])
	}
	return b
}
