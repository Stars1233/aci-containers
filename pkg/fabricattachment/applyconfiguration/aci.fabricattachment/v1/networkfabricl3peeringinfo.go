/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// NetworkFabricL3PeeringInfoApplyConfiguration represents an declarative configuration of the NetworkFabricL3PeeringInfo type for use
// with apply.
type NetworkFabricL3PeeringInfoApplyConfiguration struct {
	Encap       *int                                `json:"encap,omitempty"`
	ASN         *int                                `json:"asn,omitempty"`
	Secret      *ObjRefApplyConfiguration           `json:"secret,omitempty"`
	FabricNodes []FabricL3OutNodeApplyConfiguration `json:"fabricNodes,omitempty"`
}

// NetworkFabricL3PeeringInfoApplyConfiguration constructs an declarative configuration of the NetworkFabricL3PeeringInfo type for use with
// apply.
func NetworkFabricL3PeeringInfo() *NetworkFabricL3PeeringInfoApplyConfiguration {
	return &NetworkFabricL3PeeringInfoApplyConfiguration{}
}

// WithEncap sets the Encap field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encap field is set to the value of the last call.
func (b *NetworkFabricL3PeeringInfoApplyConfiguration) WithEncap(value int) *NetworkFabricL3PeeringInfoApplyConfiguration {
	b.Encap = &value
	return b
}

// WithASN sets the ASN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ASN field is set to the value of the last call.
func (b *NetworkFabricL3PeeringInfoApplyConfiguration) WithASN(value int) *NetworkFabricL3PeeringInfoApplyConfiguration {
	b.ASN = &value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *NetworkFabricL3PeeringInfoApplyConfiguration) WithSecret(value *ObjRefApplyConfiguration) *NetworkFabricL3PeeringInfoApplyConfiguration {
	b.Secret = value
	return b
}

// WithFabricNodes adds the given value to the FabricNodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FabricNodes field.
func (b *NetworkFabricL3PeeringInfoApplyConfiguration) WithFabricNodes(values ...*FabricL3OutNodeApplyConfiguration) *NetworkFabricL3PeeringInfoApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFabricNodes")
		}
		b.FabricNodes = append(b.FabricNodes, *values[i])
	}
	return b
}
