// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gbp.proto

#include "gbp.pb.h"
#include "gbp.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace gbpserver {

static const char* GBP_method_names[] = {
  "/gbpserver.GBP/ListObjects",
};

std::unique_ptr< GBP::Stub> GBP::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< GBP::Stub> stub(new GBP::Stub(channel));
  return stub;
}

GBP::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListObjects_(GBP_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::gbpserver::GBPOperation>* GBP::Stub::ListObjectsRaw(::grpc::ClientContext* context, const ::gbpserver::Version& request) {
  return ::grpc::internal::ClientReaderFactory< ::gbpserver::GBPOperation>::Create(channel_.get(), rpcmethod_ListObjects_, context, request);
}

::grpc::ClientAsyncReader< ::gbpserver::GBPOperation>* GBP::Stub::AsyncListObjectsRaw(::grpc::ClientContext* context, const ::gbpserver::Version& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gbpserver::GBPOperation>::Create(channel_.get(), cq, rpcmethod_ListObjects_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::gbpserver::GBPOperation>* GBP::Stub::PrepareAsyncListObjectsRaw(::grpc::ClientContext* context, const ::gbpserver::Version& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::gbpserver::GBPOperation>::Create(channel_.get(), cq, rpcmethod_ListObjects_, context, request, false, nullptr);
}

GBP::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GBP_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GBP::Service, ::gbpserver::Version, ::gbpserver::GBPOperation>(
          std::mem_fn(&GBP::Service::ListObjects), this)));
}

GBP::Service::~Service() {
}

::grpc::Status GBP::Service::ListObjects(::grpc::ServerContext* context, const ::gbpserver::Version* request, ::grpc::ServerWriter< ::gbpserver::GBPOperation>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gbpserver

