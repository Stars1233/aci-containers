// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gbp.proto

#ifndef PROTOBUF_gbp_2eproto__INCLUDED
#define PROTOBUF_gbp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_gbp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGBPOperationImpl();
void InitDefaultsGBPOperation();
void InitDefaultsVersionImpl();
void InitDefaultsVersion();
void InitDefaultsGBPObjectImpl();
void InitDefaultsGBPObject();
void InitDefaultsPropertyImpl();
void InitDefaultsProperty();
void InitDefaultsReferenceImpl();
void InitDefaultsReference();
inline void InitDefaults() {
  InitDefaultsGBPOperation();
  InitDefaultsVersion();
  InitDefaultsGBPObject();
  InitDefaultsProperty();
  InitDefaultsReference();
}
}  // namespace protobuf_gbp_2eproto
namespace gbpserver {
class GBPObject;
class GBPObjectDefaultTypeInternal;
extern GBPObjectDefaultTypeInternal _GBPObject_default_instance_;
class GBPOperation;
class GBPOperationDefaultTypeInternal;
extern GBPOperationDefaultTypeInternal _GBPOperation_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace gbpserver
namespace gbpserver {

enum GBPOperation_OpCode {
  GBPOperation_OpCode_ADD = 0,
  GBPOperation_OpCode_REPLACE = 1,
  GBPOperation_OpCode_DELETE = 2,
  GBPOperation_OpCode_GBPOperation_OpCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GBPOperation_OpCode_GBPOperation_OpCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GBPOperation_OpCode_IsValid(int value);
const GBPOperation_OpCode GBPOperation_OpCode_OpCode_MIN = GBPOperation_OpCode_ADD;
const GBPOperation_OpCode GBPOperation_OpCode_OpCode_MAX = GBPOperation_OpCode_DELETE;
const int GBPOperation_OpCode_OpCode_ARRAYSIZE = GBPOperation_OpCode_OpCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GBPOperation_OpCode_descriptor();
inline const ::std::string& GBPOperation_OpCode_Name(GBPOperation_OpCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GBPOperation_OpCode_descriptor(), value);
}
inline bool GBPOperation_OpCode_Parse(
    const ::std::string& name, GBPOperation_OpCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GBPOperation_OpCode>(
    GBPOperation_OpCode_descriptor(), name, value);
}
// ===================================================================

class GBPOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gbpserver.GBPOperation) */ {
 public:
  GBPOperation();
  virtual ~GBPOperation();

  GBPOperation(const GBPOperation& from);

  inline GBPOperation& operator=(const GBPOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GBPOperation(GBPOperation&& from) noexcept
    : GBPOperation() {
    *this = ::std::move(from);
  }

  inline GBPOperation& operator=(GBPOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GBPOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GBPOperation* internal_default_instance() {
    return reinterpret_cast<const GBPOperation*>(
               &_GBPOperation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GBPOperation* other);
  friend void swap(GBPOperation& a, GBPOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GBPOperation* New() const PROTOBUF_FINAL { return New(NULL); }

  GBPOperation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GBPOperation& from);
  void MergeFrom(const GBPOperation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GBPOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GBPOperation_OpCode OpCode;
  static const OpCode ADD =
    GBPOperation_OpCode_ADD;
  static const OpCode REPLACE =
    GBPOperation_OpCode_REPLACE;
  static const OpCode DELETE =
    GBPOperation_OpCode_DELETE;
  static inline bool OpCode_IsValid(int value) {
    return GBPOperation_OpCode_IsValid(value);
  }
  static const OpCode OpCode_MIN =
    GBPOperation_OpCode_OpCode_MIN;
  static const OpCode OpCode_MAX =
    GBPOperation_OpCode_OpCode_MAX;
  static const int OpCode_ARRAYSIZE =
    GBPOperation_OpCode_OpCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OpCode_descriptor() {
    return GBPOperation_OpCode_descriptor();
  }
  static inline const ::std::string& OpCode_Name(OpCode value) {
    return GBPOperation_OpCode_Name(value);
  }
  static inline bool OpCode_Parse(const ::std::string& name,
      OpCode* value) {
    return GBPOperation_OpCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .gbpserver.GBPObject object_list = 2;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 2;
  const ::gbpserver::GBPObject& object_list(int index) const;
  ::gbpserver::GBPObject* mutable_object_list(int index);
  ::gbpserver::GBPObject* add_object_list();
  ::google::protobuf::RepeatedPtrField< ::gbpserver::GBPObject >*
      mutable_object_list();
  const ::google::protobuf::RepeatedPtrField< ::gbpserver::GBPObject >&
      object_list() const;

  // .gbpserver.GBPOperation.OpCode opcode = 1;
  void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  ::gbpserver::GBPOperation_OpCode opcode() const;
  void set_opcode(::gbpserver::GBPOperation_OpCode value);

  // @@protoc_insertion_point(class_scope:gbpserver.GBPOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gbpserver::GBPObject > object_list_;
  int opcode_;
  mutable int _cached_size_;
  friend struct ::protobuf_gbp_2eproto::TableStruct;
  friend void ::protobuf_gbp_2eproto::InitDefaultsGBPOperationImpl();
};
// -------------------------------------------------------------------

class Version : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gbpserver.Version) */ {
 public:
  Version();
  virtual ~Version();

  Version(const Version& from);

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(Version&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Version* other);
  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const PROTOBUF_FINAL { return New(NULL); }

  Version* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Version* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gbpserver.Version)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 number_;
  mutable int _cached_size_;
  friend struct ::protobuf_gbp_2eproto::TableStruct;
  friend void ::protobuf_gbp_2eproto::InitDefaultsVersionImpl();
};
// -------------------------------------------------------------------

class GBPObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gbpserver.GBPObject) */ {
 public:
  GBPObject();
  virtual ~GBPObject();

  GBPObject(const GBPObject& from);

  inline GBPObject& operator=(const GBPObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GBPObject(GBPObject&& from) noexcept
    : GBPObject() {
    *this = ::std::move(from);
  }

  inline GBPObject& operator=(GBPObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GBPObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GBPObject* internal_default_instance() {
    return reinterpret_cast<const GBPObject*>(
               &_GBPObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GBPObject* other);
  friend void swap(GBPObject& a, GBPObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GBPObject* New() const PROTOBUF_FINAL { return New(NULL); }

  GBPObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GBPObject& from);
  void MergeFrom(const GBPObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GBPObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gbpserver.Property properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::gbpserver::Property& properties(int index) const;
  ::gbpserver::Property* mutable_properties(int index);
  ::gbpserver::Property* add_properties();
  ::google::protobuf::RepeatedPtrField< ::gbpserver::Property >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::gbpserver::Property >&
      properties() const;

  // repeated string children = 4;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 4;
  const ::std::string& children(int index) const;
  ::std::string* mutable_children(int index);
  void set_children(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_children(int index, ::std::string&& value);
  #endif
  void set_children(int index, const char* value);
  void set_children(int index, const char* value, size_t size);
  ::std::string* add_children();
  void add_children(const ::std::string& value);
  #if LANG_CXX11
  void add_children(::std::string&& value);
  #endif
  void add_children(const char* value);
  void add_children(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& children() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_children();

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string uri = 2;
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // string parent_subject = 5;
  void clear_parent_subject();
  static const int kParentSubjectFieldNumber = 5;
  const ::std::string& parent_subject() const;
  void set_parent_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_subject(::std::string&& value);
  #endif
  void set_parent_subject(const char* value);
  void set_parent_subject(const char* value, size_t size);
  ::std::string* mutable_parent_subject();
  ::std::string* release_parent_subject();
  void set_allocated_parent_subject(::std::string* parent_subject);

  // string parent_uri = 6;
  void clear_parent_uri();
  static const int kParentUriFieldNumber = 6;
  const ::std::string& parent_uri() const;
  void set_parent_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_uri(::std::string&& value);
  #endif
  void set_parent_uri(const char* value);
  void set_parent_uri(const char* value, size_t size);
  ::std::string* mutable_parent_uri();
  ::std::string* release_parent_uri();
  void set_allocated_parent_uri(::std::string* parent_uri);

  // string parent_relation = 7;
  void clear_parent_relation();
  static const int kParentRelationFieldNumber = 7;
  const ::std::string& parent_relation() const;
  void set_parent_relation(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_relation(::std::string&& value);
  #endif
  void set_parent_relation(const char* value);
  void set_parent_relation(const char* value, size_t size);
  ::std::string* mutable_parent_relation();
  ::std::string* release_parent_relation();
  void set_allocated_parent_relation(::std::string* parent_relation);

  // @@protoc_insertion_point(class_scope:gbpserver.GBPObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gbpserver::Property > properties_;
  ::google::protobuf::RepeatedPtrField< ::std::string> children_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr parent_subject_;
  ::google::protobuf::internal::ArenaStringPtr parent_uri_;
  ::google::protobuf::internal::ArenaStringPtr parent_relation_;
  mutable int _cached_size_;
  friend struct ::protobuf_gbp_2eproto::TableStruct;
  friend void ::protobuf_gbp_2eproto::InitDefaultsGBPObjectImpl();
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gbpserver.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  enum ValueCase {
    kStrVal = 2,
    kIntVal = 3,
    kRefVal = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Property* other);
  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const PROTOBUF_FINAL { return New(NULL); }

  Property* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Property* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string strVal = 2;
  private:
  bool has_strval() const;
  public:
  void clear_strval();
  static const int kStrValFieldNumber = 2;
  const ::std::string& strval() const;
  void set_strval(const ::std::string& value);
  #if LANG_CXX11
  void set_strval(::std::string&& value);
  #endif
  void set_strval(const char* value);
  void set_strval(const char* value, size_t size);
  ::std::string* mutable_strval();
  ::std::string* release_strval();
  void set_allocated_strval(::std::string* strval);

  // int32 intVal = 3;
  private:
  bool has_intval() const;
  public:
  void clear_intval();
  static const int kIntValFieldNumber = 3;
  ::google::protobuf::int32 intval() const;
  void set_intval(::google::protobuf::int32 value);

  // .gbpserver.Reference refVal = 4;
  bool has_refval() const;
  void clear_refval();
  static const int kRefValFieldNumber = 4;
  const ::gbpserver::Reference& refval() const;
  ::gbpserver::Reference* release_refval();
  ::gbpserver::Reference* mutable_refval();
  void set_allocated_refval(::gbpserver::Reference* refval);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gbpserver.Property)
 private:
  void set_has_strval();
  void set_has_intval();
  void set_has_refval();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr strval_;
    ::google::protobuf::int32 intval_;
    ::gbpserver::Reference* refval_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_gbp_2eproto::TableStruct;
  friend void ::protobuf_gbp_2eproto::InitDefaultsPropertyImpl();
};
// -------------------------------------------------------------------

class Reference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gbpserver.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Reference* other);
  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const PROTOBUF_FINAL { return New(NULL); }

  Reference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subject = 1;
  void clear_subject();
  static const int kSubjectFieldNumber = 1;
  const ::std::string& subject() const;
  void set_subject(const ::std::string& value);
  #if LANG_CXX11
  void set_subject(::std::string&& value);
  #endif
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  ::std::string* mutable_subject();
  ::std::string* release_subject();
  void set_allocated_subject(::std::string* subject);

  // string reference_uri = 2;
  void clear_reference_uri();
  static const int kReferenceUriFieldNumber = 2;
  const ::std::string& reference_uri() const;
  void set_reference_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_reference_uri(::std::string&& value);
  #endif
  void set_reference_uri(const char* value);
  void set_reference_uri(const char* value, size_t size);
  ::std::string* mutable_reference_uri();
  ::std::string* release_reference_uri();
  void set_allocated_reference_uri(::std::string* reference_uri);

  // @@protoc_insertion_point(class_scope:gbpserver.Reference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subject_;
  ::google::protobuf::internal::ArenaStringPtr reference_uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_gbp_2eproto::TableStruct;
  friend void ::protobuf_gbp_2eproto::InitDefaultsReferenceImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GBPOperation

// .gbpserver.GBPOperation.OpCode opcode = 1;
inline void GBPOperation::clear_opcode() {
  opcode_ = 0;
}
inline ::gbpserver::GBPOperation_OpCode GBPOperation::opcode() const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPOperation.opcode)
  return static_cast< ::gbpserver::GBPOperation_OpCode >(opcode_);
}
inline void GBPOperation::set_opcode(::gbpserver::GBPOperation_OpCode value) {
  
  opcode_ = value;
  // @@protoc_insertion_point(field_set:gbpserver.GBPOperation.opcode)
}

// repeated .gbpserver.GBPObject object_list = 2;
inline int GBPOperation::object_list_size() const {
  return object_list_.size();
}
inline void GBPOperation::clear_object_list() {
  object_list_.Clear();
}
inline const ::gbpserver::GBPObject& GBPOperation::object_list(int index) const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPOperation.object_list)
  return object_list_.Get(index);
}
inline ::gbpserver::GBPObject* GBPOperation::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPOperation.object_list)
  return object_list_.Mutable(index);
}
inline ::gbpserver::GBPObject* GBPOperation::add_object_list() {
  // @@protoc_insertion_point(field_add:gbpserver.GBPOperation.object_list)
  return object_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gbpserver::GBPObject >*
GBPOperation::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:gbpserver.GBPOperation.object_list)
  return &object_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gbpserver::GBPObject >&
GBPOperation::object_list() const {
  // @@protoc_insertion_point(field_list:gbpserver.GBPOperation.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// Version

// int32 number = 1;
inline void Version::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 Version::number() const {
  // @@protoc_insertion_point(field_get:gbpserver.Version.number)
  return number_;
}
inline void Version::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:gbpserver.Version.number)
}

// -------------------------------------------------------------------

// GBPObject

// string subject = 1;
inline void GBPObject::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GBPObject::subject() const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPObject.subject)
  return subject_.GetNoArena();
}
inline void GBPObject::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.GBPObject.subject)
}
#if LANG_CXX11
inline void GBPObject::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.GBPObject.subject)
}
#endif
inline void GBPObject::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.GBPObject.subject)
}
inline void GBPObject::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.GBPObject.subject)
}
inline ::std::string* GBPObject::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPObject.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GBPObject::release_subject() {
  // @@protoc_insertion_point(field_release:gbpserver.GBPObject.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GBPObject::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.GBPObject.subject)
}

// string uri = 2;
inline void GBPObject::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GBPObject::uri() const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPObject.uri)
  return uri_.GetNoArena();
}
inline void GBPObject::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.GBPObject.uri)
}
#if LANG_CXX11
inline void GBPObject::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.GBPObject.uri)
}
#endif
inline void GBPObject::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.GBPObject.uri)
}
inline void GBPObject::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.GBPObject.uri)
}
inline ::std::string* GBPObject::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPObject.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GBPObject::release_uri() {
  // @@protoc_insertion_point(field_release:gbpserver.GBPObject.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GBPObject::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.GBPObject.uri)
}

// repeated .gbpserver.Property properties = 3;
inline int GBPObject::properties_size() const {
  return properties_.size();
}
inline void GBPObject::clear_properties() {
  properties_.Clear();
}
inline const ::gbpserver::Property& GBPObject::properties(int index) const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPObject.properties)
  return properties_.Get(index);
}
inline ::gbpserver::Property* GBPObject::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPObject.properties)
  return properties_.Mutable(index);
}
inline ::gbpserver::Property* GBPObject::add_properties() {
  // @@protoc_insertion_point(field_add:gbpserver.GBPObject.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gbpserver::Property >*
GBPObject::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:gbpserver.GBPObject.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gbpserver::Property >&
GBPObject::properties() const {
  // @@protoc_insertion_point(field_list:gbpserver.GBPObject.properties)
  return properties_;
}

// repeated string children = 4;
inline int GBPObject::children_size() const {
  return children_.size();
}
inline void GBPObject::clear_children() {
  children_.Clear();
}
inline const ::std::string& GBPObject::children(int index) const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPObject.children)
  return children_.Get(index);
}
inline ::std::string* GBPObject::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPObject.children)
  return children_.Mutable(index);
}
inline void GBPObject::set_children(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gbpserver.GBPObject.children)
  children_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GBPObject::set_children(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gbpserver.GBPObject.children)
  children_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GBPObject::set_children(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  children_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gbpserver.GBPObject.children)
}
inline void GBPObject::set_children(int index, const char* value, size_t size) {
  children_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gbpserver.GBPObject.children)
}
inline ::std::string* GBPObject::add_children() {
  // @@protoc_insertion_point(field_add_mutable:gbpserver.GBPObject.children)
  return children_.Add();
}
inline void GBPObject::add_children(const ::std::string& value) {
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gbpserver.GBPObject.children)
}
#if LANG_CXX11
inline void GBPObject::add_children(::std::string&& value) {
  children_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gbpserver.GBPObject.children)
}
#endif
inline void GBPObject::add_children(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gbpserver.GBPObject.children)
}
inline void GBPObject::add_children(const char* value, size_t size) {
  children_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gbpserver.GBPObject.children)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GBPObject::children() const {
  // @@protoc_insertion_point(field_list:gbpserver.GBPObject.children)
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GBPObject::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:gbpserver.GBPObject.children)
  return &children_;
}

// string parent_subject = 5;
inline void GBPObject::clear_parent_subject() {
  parent_subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GBPObject::parent_subject() const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPObject.parent_subject)
  return parent_subject_.GetNoArena();
}
inline void GBPObject::set_parent_subject(const ::std::string& value) {
  
  parent_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.GBPObject.parent_subject)
}
#if LANG_CXX11
inline void GBPObject::set_parent_subject(::std::string&& value) {
  
  parent_subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.GBPObject.parent_subject)
}
#endif
inline void GBPObject::set_parent_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.GBPObject.parent_subject)
}
inline void GBPObject::set_parent_subject(const char* value, size_t size) {
  
  parent_subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.GBPObject.parent_subject)
}
inline ::std::string* GBPObject::mutable_parent_subject() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPObject.parent_subject)
  return parent_subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GBPObject::release_parent_subject() {
  // @@protoc_insertion_point(field_release:gbpserver.GBPObject.parent_subject)
  
  return parent_subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GBPObject::set_allocated_parent_subject(::std::string* parent_subject) {
  if (parent_subject != NULL) {
    
  } else {
    
  }
  parent_subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_subject);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.GBPObject.parent_subject)
}

// string parent_uri = 6;
inline void GBPObject::clear_parent_uri() {
  parent_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GBPObject::parent_uri() const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPObject.parent_uri)
  return parent_uri_.GetNoArena();
}
inline void GBPObject::set_parent_uri(const ::std::string& value) {
  
  parent_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.GBPObject.parent_uri)
}
#if LANG_CXX11
inline void GBPObject::set_parent_uri(::std::string&& value) {
  
  parent_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.GBPObject.parent_uri)
}
#endif
inline void GBPObject::set_parent_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.GBPObject.parent_uri)
}
inline void GBPObject::set_parent_uri(const char* value, size_t size) {
  
  parent_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.GBPObject.parent_uri)
}
inline ::std::string* GBPObject::mutable_parent_uri() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPObject.parent_uri)
  return parent_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GBPObject::release_parent_uri() {
  // @@protoc_insertion_point(field_release:gbpserver.GBPObject.parent_uri)
  
  return parent_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GBPObject::set_allocated_parent_uri(::std::string* parent_uri) {
  if (parent_uri != NULL) {
    
  } else {
    
  }
  parent_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_uri);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.GBPObject.parent_uri)
}

// string parent_relation = 7;
inline void GBPObject::clear_parent_relation() {
  parent_relation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GBPObject::parent_relation() const {
  // @@protoc_insertion_point(field_get:gbpserver.GBPObject.parent_relation)
  return parent_relation_.GetNoArena();
}
inline void GBPObject::set_parent_relation(const ::std::string& value) {
  
  parent_relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.GBPObject.parent_relation)
}
#if LANG_CXX11
inline void GBPObject::set_parent_relation(::std::string&& value) {
  
  parent_relation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.GBPObject.parent_relation)
}
#endif
inline void GBPObject::set_parent_relation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.GBPObject.parent_relation)
}
inline void GBPObject::set_parent_relation(const char* value, size_t size) {
  
  parent_relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.GBPObject.parent_relation)
}
inline ::std::string* GBPObject::mutable_parent_relation() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.GBPObject.parent_relation)
  return parent_relation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GBPObject::release_parent_relation() {
  // @@protoc_insertion_point(field_release:gbpserver.GBPObject.parent_relation)
  
  return parent_relation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GBPObject::set_allocated_parent_relation(::std::string* parent_relation) {
  if (parent_relation != NULL) {
    
  } else {
    
  }
  parent_relation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_relation);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.GBPObject.parent_relation)
}

// -------------------------------------------------------------------

// Property

// string name = 1;
inline void Property::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Property::name() const {
  // @@protoc_insertion_point(field_get:gbpserver.Property.name)
  return name_.GetNoArena();
}
inline void Property::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.Property.name)
}
#if LANG_CXX11
inline void Property::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.Property.name)
}
#endif
inline void Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.Property.name)
}
inline void Property::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.Property.name)
}
inline ::std::string* Property::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.Property.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_name() {
  // @@protoc_insertion_point(field_release:gbpserver.Property.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.Property.name)
}

// string strVal = 2;
inline bool Property::has_strval() const {
  return value_case() == kStrVal;
}
inline void Property::set_has_strval() {
  _oneof_case_[0] = kStrVal;
}
inline void Property::clear_strval() {
  if (has_strval()) {
    value_.strval_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Property::strval() const {
  // @@protoc_insertion_point(field_get:gbpserver.Property.strVal)
  if (has_strval()) {
    return value_.strval_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Property::set_strval(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gbpserver.Property.strVal)
  if (!has_strval()) {
    clear_value();
    set_has_strval();
    value_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.Property.strVal)
}
#if LANG_CXX11
inline void Property::set_strval(::std::string&& value) {
  // @@protoc_insertion_point(field_set:gbpserver.Property.strVal)
  if (!has_strval()) {
    clear_value();
    set_has_strval();
    value_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strval_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.Property.strVal)
}
#endif
inline void Property::set_strval(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_strval()) {
    clear_value();
    set_has_strval();
    value_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.Property.strVal)
}
inline void Property::set_strval(const char* value, size_t size) {
  if (!has_strval()) {
    clear_value();
    set_has_strval();
    value_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.strval_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.Property.strVal)
}
inline ::std::string* Property::mutable_strval() {
  if (!has_strval()) {
    clear_value();
    set_has_strval();
    value_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:gbpserver.Property.strVal)
  return value_.strval_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Property::release_strval() {
  // @@protoc_insertion_point(field_release:gbpserver.Property.strVal)
  if (has_strval()) {
    clear_has_value();
    return value_.strval_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Property::set_allocated_strval(::std::string* strval) {
  if (!has_strval()) {
    value_.strval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (strval != NULL) {
    set_has_strval();
    value_.strval_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        strval);
  }
  // @@protoc_insertion_point(field_set_allocated:gbpserver.Property.strVal)
}

// int32 intVal = 3;
inline bool Property::has_intval() const {
  return value_case() == kIntVal;
}
inline void Property::set_has_intval() {
  _oneof_case_[0] = kIntVal;
}
inline void Property::clear_intval() {
  if (has_intval()) {
    value_.intval_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 Property::intval() const {
  // @@protoc_insertion_point(field_get:gbpserver.Property.intVal)
  if (has_intval()) {
    return value_.intval_;
  }
  return 0;
}
inline void Property::set_intval(::google::protobuf::int32 value) {
  if (!has_intval()) {
    clear_value();
    set_has_intval();
  }
  value_.intval_ = value;
  // @@protoc_insertion_point(field_set:gbpserver.Property.intVal)
}

// .gbpserver.Reference refVal = 4;
inline bool Property::has_refval() const {
  return value_case() == kRefVal;
}
inline void Property::set_has_refval() {
  _oneof_case_[0] = kRefVal;
}
inline void Property::clear_refval() {
  if (has_refval()) {
    delete value_.refval_;
    clear_has_value();
  }
}
inline ::gbpserver::Reference* Property::release_refval() {
  // @@protoc_insertion_point(field_release:gbpserver.Property.refVal)
  if (has_refval()) {
    clear_has_value();
      ::gbpserver::Reference* temp = value_.refval_;
    value_.refval_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::gbpserver::Reference& Property::refval() const {
  // @@protoc_insertion_point(field_get:gbpserver.Property.refVal)
  return has_refval()
      ? *value_.refval_
      : *reinterpret_cast< ::gbpserver::Reference*>(&::gbpserver::_Reference_default_instance_);
}
inline ::gbpserver::Reference* Property::mutable_refval() {
  if (!has_refval()) {
    clear_value();
    set_has_refval();
    value_.refval_ = new ::gbpserver::Reference;
  }
  // @@protoc_insertion_point(field_mutable:gbpserver.Property.refVal)
  return value_.refval_;
}

inline bool Property::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Property::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Property::ValueCase Property::value_case() const {
  return Property::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Reference

// string subject = 1;
inline void Reference::clear_subject() {
  subject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reference::subject() const {
  // @@protoc_insertion_point(field_get:gbpserver.Reference.subject)
  return subject_.GetNoArena();
}
inline void Reference::set_subject(const ::std::string& value) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.Reference.subject)
}
#if LANG_CXX11
inline void Reference::set_subject(::std::string&& value) {
  
  subject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.Reference.subject)
}
#endif
inline void Reference::set_subject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.Reference.subject)
}
inline void Reference::set_subject(const char* value, size_t size) {
  
  subject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.Reference.subject)
}
inline ::std::string* Reference::mutable_subject() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.Reference.subject)
  return subject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reference::release_subject() {
  // @@protoc_insertion_point(field_release:gbpserver.Reference.subject)
  
  return subject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reference::set_allocated_subject(::std::string* subject) {
  if (subject != NULL) {
    
  } else {
    
  }
  subject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.Reference.subject)
}

// string reference_uri = 2;
inline void Reference::clear_reference_uri() {
  reference_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reference::reference_uri() const {
  // @@protoc_insertion_point(field_get:gbpserver.Reference.reference_uri)
  return reference_uri_.GetNoArena();
}
inline void Reference::set_reference_uri(const ::std::string& value) {
  
  reference_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gbpserver.Reference.reference_uri)
}
#if LANG_CXX11
inline void Reference::set_reference_uri(::std::string&& value) {
  
  reference_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gbpserver.Reference.reference_uri)
}
#endif
inline void Reference::set_reference_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gbpserver.Reference.reference_uri)
}
inline void Reference::set_reference_uri(const char* value, size_t size) {
  
  reference_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gbpserver.Reference.reference_uri)
}
inline ::std::string* Reference::mutable_reference_uri() {
  
  // @@protoc_insertion_point(field_mutable:gbpserver.Reference.reference_uri)
  return reference_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reference::release_reference_uri() {
  // @@protoc_insertion_point(field_release:gbpserver.Reference.reference_uri)
  
  return reference_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reference::set_allocated_reference_uri(::std::string* reference_uri) {
  if (reference_uri != NULL) {
    
  } else {
    
  }
  reference_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_uri);
  // @@protoc_insertion_point(field_set_allocated:gbpserver.Reference.reference_uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gbpserver

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gbpserver::GBPOperation_OpCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gbpserver::GBPOperation_OpCode>() {
  return ::gbpserver::GBPOperation_OpCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gbp_2eproto__INCLUDED
