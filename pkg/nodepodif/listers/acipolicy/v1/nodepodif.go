/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/nodepodif/apis/acipolicy/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodePodIFLister helps list NodePodIFs.
// All objects returned here must be treated as read-only.
type NodePodIFLister interface {
	// List lists all NodePodIFs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodePodIF, err error)
	// NodePodIFs returns an object that can list and get NodePodIFs.
	NodePodIFs(namespace string) NodePodIFNamespaceLister
	NodePodIFListerExpansion
}

// nodePodIFLister implements the NodePodIFLister interface.
type nodePodIFLister struct {
	indexer cache.Indexer
}

// NewNodePodIFLister returns a new NodePodIFLister.
func NewNodePodIFLister(indexer cache.Indexer) NodePodIFLister {
	return &nodePodIFLister{indexer: indexer}
}

// List lists all NodePodIFs in the indexer.
func (s *nodePodIFLister) List(selector labels.Selector) (ret []*v1.NodePodIF, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodePodIF))
	})
	return ret, err
}

// NodePodIFs returns an object that can list and get NodePodIFs.
func (s *nodePodIFLister) NodePodIFs(namespace string) NodePodIFNamespaceLister {
	return nodePodIFNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodePodIFNamespaceLister helps list and get NodePodIFs.
// All objects returned here must be treated as read-only.
type NodePodIFNamespaceLister interface {
	// List lists all NodePodIFs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodePodIF, err error)
	// Get retrieves the NodePodIF from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NodePodIF, error)
	NodePodIFNamespaceListerExpansion
}

// nodePodIFNamespaceLister implements the NodePodIFNamespaceLister
// interface.
type nodePodIFNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodePodIFs in the indexer for a given namespace.
func (s nodePodIFNamespaceLister) List(selector labels.Selector) (ret []*v1.NodePodIF, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodePodIF))
	})
	return ret, err
}

// Get retrieves the NodePodIF from the indexer for a given namespace and name.
func (s nodePodIFNamespaceLister) Get(name string) (*v1.NodePodIF, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodepodif"), name)
	}
	return obj.(*v1.NodePodIF), nil
}
