/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/hpp/apis/aci.hpp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostprotPolLister helps list HostprotPols.
// All objects returned here must be treated as read-only.
type HostprotPolLister interface {
	// List lists all HostprotPols in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HostprotPol, err error)
	// HostprotPols returns an object that can list and get HostprotPols.
	HostprotPols(namespace string) HostprotPolNamespaceLister
	HostprotPolListerExpansion
}

// hostprotPolLister implements the HostprotPolLister interface.
type hostprotPolLister struct {
	indexer cache.Indexer
}

// NewHostprotPolLister returns a new HostprotPolLister.
func NewHostprotPolLister(indexer cache.Indexer) HostprotPolLister {
	return &hostprotPolLister{indexer: indexer}
}

// List lists all HostprotPols in the indexer.
func (s *hostprotPolLister) List(selector labels.Selector) (ret []*v1.HostprotPol, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HostprotPol))
	})
	return ret, err
}

// HostprotPols returns an object that can list and get HostprotPols.
func (s *hostprotPolLister) HostprotPols(namespace string) HostprotPolNamespaceLister {
	return hostprotPolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostprotPolNamespaceLister helps list and get HostprotPols.
// All objects returned here must be treated as read-only.
type HostprotPolNamespaceLister interface {
	// List lists all HostprotPols in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HostprotPol, err error)
	// Get retrieves the HostprotPol from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.HostprotPol, error)
	HostprotPolNamespaceListerExpansion
}

// hostprotPolNamespaceLister implements the HostprotPolNamespaceLister
// interface.
type hostprotPolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostprotPols in the indexer for a given namespace.
func (s hostprotPolNamespaceLister) List(selector labels.Selector) (ret []*v1.HostprotPol, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HostprotPol))
	})
	return ret, err
}

// Get retrieves the HostprotPol from the indexer for a given namespace and name.
func (s hostprotPolNamespaceLister) Get(name string) (*v1.HostprotPol, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("hostprotpol"), name)
	}
	return obj.(*v1.HostprotPol), nil
}
