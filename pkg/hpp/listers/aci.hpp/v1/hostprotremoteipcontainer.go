/***
Copyright 2021 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/hpp/apis/aci.hpp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostprotRemoteIpContainerLister helps list HostprotRemoteIpContainers.
// All objects returned here must be treated as read-only.
type HostprotRemoteIpContainerLister interface {
	// List lists all HostprotRemoteIpContainers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HostprotRemoteIpContainer, err error)
	// HostprotRemoteIpContainers returns an object that can list and get HostprotRemoteIpContainers.
	HostprotRemoteIpContainers(namespace string) HostprotRemoteIpContainerNamespaceLister
	HostprotRemoteIpContainerListerExpansion
}

// hostprotRemoteIpContainerLister implements the HostprotRemoteIpContainerLister interface.
type hostprotRemoteIpContainerLister struct {
	indexer cache.Indexer
}

// NewHostprotRemoteIpContainerLister returns a new HostprotRemoteIpContainerLister.
func NewHostprotRemoteIpContainerLister(indexer cache.Indexer) HostprotRemoteIpContainerLister {
	return &hostprotRemoteIpContainerLister{indexer: indexer}
}

// List lists all HostprotRemoteIpContainers in the indexer.
func (s *hostprotRemoteIpContainerLister) List(selector labels.Selector) (ret []*v1.HostprotRemoteIpContainer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HostprotRemoteIpContainer))
	})
	return ret, err
}

// HostprotRemoteIpContainers returns an object that can list and get HostprotRemoteIpContainers.
func (s *hostprotRemoteIpContainerLister) HostprotRemoteIpContainers(namespace string) HostprotRemoteIpContainerNamespaceLister {
	return hostprotRemoteIpContainerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostprotRemoteIpContainerNamespaceLister helps list and get HostprotRemoteIpContainers.
// All objects returned here must be treated as read-only.
type HostprotRemoteIpContainerNamespaceLister interface {
	// List lists all HostprotRemoteIpContainers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HostprotRemoteIpContainer, err error)
	// Get retrieves the HostprotRemoteIpContainer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.HostprotRemoteIpContainer, error)
	HostprotRemoteIpContainerNamespaceListerExpansion
}

// hostprotRemoteIpContainerNamespaceLister implements the HostprotRemoteIpContainerNamespaceLister
// interface.
type hostprotRemoteIpContainerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostprotRemoteIpContainers in the indexer for a given namespace.
func (s hostprotRemoteIpContainerNamespaceLister) List(selector labels.Selector) (ret []*v1.HostprotRemoteIpContainer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HostprotRemoteIpContainer))
	})
	return ret, err
}

// Get retrieves the HostprotRemoteIpContainer from the indexer for a given namespace and name.
func (s hostprotRemoteIpContainerNamespaceLister) Get(name string) (*v1.HostprotRemoteIpContainer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("hostprotremoteipcontainer"), name)
	}
	return obj.(*v1.HostprotRemoteIpContainer), nil
}
