/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/gbpcrd/apis/acipolicy/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GBPSStateLister helps list GBPSStates.
type GBPSStateLister interface {
	// List lists all GBPSStates in the indexer.
	List(selector labels.Selector) (ret []*v1.GBPSState, err error)
	// GBPSStates returns an object that can list and get GBPSStates.
	GBPSStates(namespace string) GBPSStateNamespaceLister
	GBPSStateListerExpansion
}

// gBPSStateLister implements the GBPSStateLister interface.
type gBPSStateLister struct {
	indexer cache.Indexer
}

// NewGBPSStateLister returns a new GBPSStateLister.
func NewGBPSStateLister(indexer cache.Indexer) GBPSStateLister {
	return &gBPSStateLister{indexer: indexer}
}

// List lists all GBPSStates in the indexer.
func (s *gBPSStateLister) List(selector labels.Selector) (ret []*v1.GBPSState, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GBPSState))
	})
	return ret, err
}

// GBPSStates returns an object that can list and get GBPSStates.
func (s *gBPSStateLister) GBPSStates(namespace string) GBPSStateNamespaceLister {
	return gBPSStateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GBPSStateNamespaceLister helps list and get GBPSStates.
type GBPSStateNamespaceLister interface {
	// List lists all GBPSStates in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.GBPSState, err error)
	// Get retrieves the GBPSState from the indexer for a given namespace and name.
	Get(name string) (*v1.GBPSState, error)
	GBPSStateNamespaceListerExpansion
}

// gBPSStateNamespaceLister implements the GBPSStateNamespaceLister
// interface.
type gBPSStateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GBPSStates in the indexer for a given namespace.
func (s gBPSStateNamespaceLister) List(selector labels.Selector) (ret []*v1.GBPSState, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.GBPSState))
	})
	return ret, err
}

// Get retrieves the GBPSState from the indexer for a given namespace and name.
func (s gBPSStateNamespaceLister) Get(name string) (*v1.GBPSState, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("gbpsstate"), name)
	}
	return obj.(*v1.GBPSState), nil
}
