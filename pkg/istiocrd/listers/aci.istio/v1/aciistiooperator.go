/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/istiocrd/apis/aci.istio/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AciIstioOperatorLister helps list AciIstioOperators.
type AciIstioOperatorLister interface {
	// List lists all AciIstioOperators in the indexer.
	List(selector labels.Selector) (ret []*v1.AciIstioOperator, err error)
	// AciIstioOperators returns an object that can list and get AciIstioOperators.
	AciIstioOperators(namespace string) AciIstioOperatorNamespaceLister
	AciIstioOperatorListerExpansion
}

// aciIstioOperatorLister implements the AciIstioOperatorLister interface.
type aciIstioOperatorLister struct {
	indexer cache.Indexer
}

// NewAciIstioOperatorLister returns a new AciIstioOperatorLister.
func NewAciIstioOperatorLister(indexer cache.Indexer) AciIstioOperatorLister {
	return &aciIstioOperatorLister{indexer: indexer}
}

// List lists all AciIstioOperators in the indexer.
func (s *aciIstioOperatorLister) List(selector labels.Selector) (ret []*v1.AciIstioOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AciIstioOperator))
	})
	return ret, err
}

// AciIstioOperators returns an object that can list and get AciIstioOperators.
func (s *aciIstioOperatorLister) AciIstioOperators(namespace string) AciIstioOperatorNamespaceLister {
	return aciIstioOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AciIstioOperatorNamespaceLister helps list and get AciIstioOperators.
type AciIstioOperatorNamespaceLister interface {
	// List lists all AciIstioOperators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AciIstioOperator, err error)
	// Get retrieves the AciIstioOperator from the indexer for a given namespace and name.
	Get(name string) (*v1.AciIstioOperator, error)
	AciIstioOperatorNamespaceListerExpansion
}

// aciIstioOperatorNamespaceLister implements the AciIstioOperatorNamespaceLister
// interface.
type aciIstioOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AciIstioOperators in the indexer for a given namespace.
func (s aciIstioOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1.AciIstioOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AciIstioOperator))
	})
	return ret, err
}

// Get retrieves the AciIstioOperator from the indexer for a given namespace and name.
func (s aciIstioOperatorNamespaceLister) Get(name string) (*v1.AciIstioOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("aciistiooperator"), name)
	}
	return obj.(*v1.AciIstioOperator), nil
}
