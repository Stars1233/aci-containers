/***
Copyright 2019 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/noironetworks/aci-containers/pkg/rdconfig/apis/aci.snat/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RdConfigLister helps list RdConfigs.
type RdConfigLister interface {
	// List lists all RdConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.RdConfig, err error)
	// RdConfigs returns an object that can list and get RdConfigs.
	RdConfigs(namespace string) RdConfigNamespaceLister
	RdConfigListerExpansion
}

// rdConfigLister implements the RdConfigLister interface.
type rdConfigLister struct {
	indexer cache.Indexer
}

// NewRdConfigLister returns a new RdConfigLister.
func NewRdConfigLister(indexer cache.Indexer) RdConfigLister {
	return &rdConfigLister{indexer: indexer}
}

// List lists all RdConfigs in the indexer.
func (s *rdConfigLister) List(selector labels.Selector) (ret []*v1.RdConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RdConfig))
	})
	return ret, err
}

// RdConfigs returns an object that can list and get RdConfigs.
func (s *rdConfigLister) RdConfigs(namespace string) RdConfigNamespaceLister {
	return rdConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RdConfigNamespaceLister helps list and get RdConfigs.
type RdConfigNamespaceLister interface {
	// List lists all RdConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.RdConfig, err error)
	// Get retrieves the RdConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.RdConfig, error)
	RdConfigNamespaceListerExpansion
}

// rdConfigNamespaceLister implements the RdConfigNamespaceLister
// interface.
type rdConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RdConfigs in the indexer for a given namespace.
func (s rdConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.RdConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RdConfig))
	})
	return ret, err
}

// Get retrieves the RdConfig from the indexer for a given namespace and name.
func (s rdConfigNamespaceLister) Get(name string) (*v1.RdConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("rdconfig"), name)
	}
	return obj.(*v1.RdConfig), nil
}
